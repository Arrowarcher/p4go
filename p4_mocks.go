// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package p4

import (
	"sync"
)

// Ensure, that RunnerMock does implement Runner.
// If this is not the case, regenerate this file with moq.
var _ Runner = &RunnerMock{}

// RunnerMock is a mock implementation of Runner.
//
// 	func TestSomethingThatUsesRunner(t *testing.T) {
//
// 		// make and configure a mocked Runner
// 		mockedRunner := &RunnerMock{
// 			RunFunc: func(strings []string) ([]map[interface{}]interface{}, error) {
// 				panic("mock out the Run method")
// 			},
// 		}
//
// 		// use mockedRunner in code that requires Runner
// 		// and then make assertions.
//
// 	}
type RunnerMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(strings []string) ([]map[interface{}]interface{}, error)

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Strings is the strings argument value.
			Strings []string
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *RunnerMock) Run(strings []string) ([]map[interface{}]interface{}, error) {
	if mock.RunFunc == nil {
		panic("RunnerMock.RunFunc: method is nil but Runner.Run was just called")
	}
	callInfo := struct {
		Strings []string
	}{
		Strings: strings,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(strings)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedRunner.RunCalls())
func (mock *RunnerMock) RunCalls() []struct {
	Strings []string
} {
	var calls []struct {
		Strings []string
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
